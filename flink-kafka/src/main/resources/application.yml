server:
    port: 8007
spring:
    application:
        name: flink-kafka
    kafka:
        bootstrap-servers: localhost:9092

#kafka:
#    #bootstrap-servers: server1:9092,server2:9093 #kafka开发地址,
#    #生产者配置
#    producer:
#        # Kafka提供的序列化和反序列化类
#        key-serializer: org.apache.kafka.common.serialization.StringSerializer #序列化
#        value-serializer: org.apache.kafka.common.serialization.StringSerializer
#        retries: 1 # 消息发送重试次数
#        #acks = 0：设置成 表示 producer 完全不理睬 leader broker 端的处理结果。此时producer 发送消息后立即开启下 条消息的发送，根本不等待 leader broker 端返回结果
#        #acks= all 或者－1 ：表示当发送消息时， leader broker 不仅会将消息写入本地日志，同时还会等待所有其他副本都成功写入它们各自的本地日志后，才发送响应结果给，消息安全但是吞吐量会比较低。
#        #acks = 1：默认的参数值。 producer 发送消息后 leader broker 仅将该消息写入本地日志，然后便发送响应结果给producer ，而无须等待其他副本写入该消息。折中方案，只要leader一直活着消息就不会丢失，同时也保证了吞吐量
#        acks: 1 #应答级别:多少个分区副本备份完成时向生产者发送ack确认(可选0、1、all/-1)
#        batch-size: 16384 #批量大小
#        properties:
#            linger:
#                ms: 0 #提交延迟
#        buffer-memory: 33554432 # 生产端缓冲区大小
#    # 消费者配置
#    consumer:
#        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#        # 分组名称
#        group-id: web
#        enable-auto-commit: false
#        #提交offset延时(接收到消息后多久提交offset)
#        # auto-commit-interval: 1000ms
#        #当kafka中没有初始offset或offset超出范围时将自动重置offset
#        # earliest:重置为分区中最小的offset;
#        # latest:重置为分区中最新的offset(消费分区中新产生的数据);
#        # none:只要有一个分区不存在已提交的offset,就抛出异常;
#        auto-offset-reset: latest
#        properties:
#            #消费会话超时时间(超过这个时间consumer没有发送心跳,就会触发rebalance操作)
#            session.timeout.ms: 15000
#            #消费请求超时时间
#            request.timeout.ms: 18000
#        #批量消费每次最多消费多少条消息
#        #每次拉取一条，一条条消费，当然是具体业务状况设置
#        max-poll-records: 1
#        # 指定心跳包发送频率，即间隔多长时间发送一次心跳包，优化该值的设置可以减少Rebalance操作，默认时间为3秒；
#        heartbeat-interval: 6000
#        # 发出请求时传递给服务器的 ID。用于服务器端日志记录 正常使用后解开注释，不然只有一个节点会报错
#        #client-id: mqtt
#    listener:
#        #消费端监听的topic不存在时，项目启动会报错(关掉)
#        missing-topics-fatal: false
#        #设置消费类型 批量消费 batch，单条消费：single
#        type: single
#        #指定容器的线程数，提高并发量
#        #concurrency: 3
#        #手动提交偏移量 manual达到一定数据后批量提交
#        #ack-mode: manual
#        ack-mode: MANUAL_IMMEDIATE #手動確認消息
#          # 认证
#          #properties:
#          #security:
#          #protocol: SASL_PLAINTEXT
#          #sasl:
#        #mechanism: SCRAM-SHA-256
#        #jaas:config: 'org.apache.kafka.common.security.scram.ScramLoginModule required username="username" password="password";'
logging:
    level:
      org:
          springframework:
              kafka: ERROR
          apache:
              kafka: ERROR
